{"version":3,"sources":["main.jpg","GameCanvas.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","canvasWidth","canvasHeight","options","colors","johan","gill","anders","peter","renderRect","ctx","x","y","width","height","color","fillStyle","fillRect","getRects","votes","lastOption","total","Object","values","reduce","sum","v","getTotalVotes","result","option","vote","last","rect","Math","max","GameCanvas","props","likes","updateCanvas","nextIteration","Date","now","passed","lastIteration","canvasRef","current","getContext","rects","clearRect","forEach","optionLikes","font","fillText","like","i","nextPos","pos","splice","opacity","min","round","value","animationFrameRequestId","requestAnimationFrame","e","console","log","undefined","React","createRef","animate","this","cancelAnimationFrame","nextProps","entries","prop","push","ref","Component","App","ws","WebSocket","window","location","hostname","newLike","d","setState","mapClick","p","send","state","error","ready","figlet","parseFont","err","data","onopen","onclose","onmessage","evt","JSON","parse","className","Fragment","src","headerImage","alt","useMap","name","onClick","bind","title","coords","shape","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"4EAAAA,EAAOC,QAAU,IAA0B,kC,mOCErCC,EAAc,IACdC,EAAe,IAEfC,EAAU,CAAC,QAAS,OAAQ,SAAU,SAEtCC,EAAS,CACbC,MAAO,UACPC,KAAM,UACNC,OAAQ,UACRC,MAAO,WAGHC,EAAa,SAACC,EAAD,GAAwC,IAAjCC,EAAgC,EAAhCA,EAAGC,EAA6B,EAA7BA,EAAGC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,MAC7CL,EAAIM,UAAYD,EAChBL,EAAIO,SAASN,EAAGC,EAAGC,EAAOC,IAKtBI,EAAW,SAACf,EAASgB,GACzB,IACIC,EADEC,EAHc,SAAAF,GAAK,OAAIG,OAAOC,OAAOJ,GAAOK,QAAO,SAACC,EAAKC,GAAN,OAAYD,EAAMC,IAAG,GAGhEC,CAAcR,GAG5B,OAAOhB,EAAQqB,QAAO,SAACI,EAAQC,GAC7B,IAAMC,EAAOX,EAAMU,GACbd,EAAQX,EAAOyB,GAEjBlB,EAAI,EACR,GAAGS,EAAW,CACZ,IAAMW,EAAOH,EAAOR,GACpBT,EAAIoB,EAAKpB,EAAIoB,EAAKlB,MAAQ,EAG5B,IAEMmB,EAAO,CACXpB,EAAG,EACHD,IACAE,MALYoB,KAAKC,IAAI,GAAwBJ,EAAKT,GAAzBpB,EAAY,KAAqB,IAM1Da,OAAQZ,EACRa,SAKF,OAFAa,EAAOC,GAAUG,EACjBZ,EAAaS,EACND,IACN,KAoGUO,E,YAjFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAfRC,MAAQ,CACNhC,MAAO,GACPC,KAAM,GACNC,OAAQ,GACRC,MAAO,IAUU,EAPnBW,MAAQ,CACNd,MAAO,EACPC,KAAM,EACNC,OAAQ,EACRC,MAAO,GAGU,EA6BnB8B,aAAe,WACb,IACE,IAAMC,EAAgBC,KAAKC,MACrBC,EAASH,EAAgB,EAAKI,cAE9BjC,EADS,EAAKkC,UAAUC,QACXC,WAAW,MACxBC,EAAQ7B,EAASf,EAAS,EAAKgB,OAErCT,EAAIsC,UAAU,EAAE,EAAG9C,EAAcD,GAEjCE,EAAQ8C,SAAQ,SAAApB,GACdpB,EAAWC,EAAKqC,EAAMlB,IACtB,IAAMqB,EAAc,EAAKb,MAAMR,GACzBV,EAAQ,EAAKA,MAAMU,GACnBlB,EAAIoC,EAAMlB,GAAQlB,EAAIoC,EAAMlB,GAAQhB,MAAM,EAAI,GAEpDH,EAAIyC,KAAO,oBACXzC,EAAIM,UAAJ,mBACAN,EAAI0C,SAAJ,UAAgBjC,GAAS4B,EAAMlB,GAAQlB,EAAGT,EAAa,GAEvDgD,EAAYD,SAAQ,SAACI,EAAMC,GAEzB,IAAMC,EAAUF,EAAKG,IAAM,GAAMd,EAEjC,GAAGa,EAAU,EACXL,EAAYO,OAAOH,EAAG,OADxB,CAKA,IAAMI,EAAUzB,KAAK0B,IAAI1B,KAAK2B,MAAWL,GAAWrD,EAAa,GAA7B,KAAkC,IAAK,GAC3EQ,EAAIM,UAAJ,0BAAmC0C,EAAnC,KACAhD,EAAIyC,KAAO,oBACXzC,EAAI0C,SAAJ,WAAiBC,EAAKQ,OAASlD,EAAG0C,EAAKG,KACvCH,EAAKG,IAAMD,SAIf,EAAKZ,cAAgBJ,EACrB,EAAKuB,wBAA0BC,sBAAsB,EAAKzB,cAC1D,MAAO0B,GACPC,QAAQC,IAAIF,KAnEd,EAAKF,6BAA0BK,EAC/B,EAAKvB,UAAYwB,IAAMC,YACvB,EAAKC,SAAU,EAJE,E,iFAQjBC,KAAK5B,cAAgBH,KAAKC,MAC1B8B,KAAKT,wBAA0BC,sBAAsBQ,KAAKjC,gB,8CAIvDiC,KAAKT,yBACNU,qBAAqBD,KAAKT,2B,4CAIRW,GAAW,IAAD,OAQ9B,OAPAnD,OAAOoD,QAAQD,EAAUpC,OAAOY,SAAQ,YAAoB,IAAD,mBAAjB0B,EAAiB,KAAXd,EAAW,KACrDA,IAGJ,EAAK1C,MAAMwD,GAAQ,EAAKxD,MAAMwD,IAASd,EACvC,EAAKxB,MAAMsC,GAAMC,KAAK,CAACpB,IAAKtD,EAAa,EAAI,GAAI2D,eAE5C,I,+BAgDP,OACE,6BACE,4BAAQgB,IAAKN,KAAK3B,UAAW/B,MAAOZ,EAAaa,OAAQZ,S,GA5FxCkE,IAAMU,W,iBC6BhBC,G,kBApEb,WAAY3C,GAAO,IAAD,8BAChB,4CAAMA,KAHR4C,GAAK,IAAIC,UAAJ,eAAsBC,OAAOC,SAASC,WAEzB,EAiClBC,QAAU,SAAAC,GACR,EAAKC,SAAS,CAAClD,MAAOiD,KAlCN,EAqClBE,SAAW,SAAAC,GACT,EAAKT,GAAGU,KAAKD,IApCb,EAAKE,MAAQ,CACXC,OAAO,EACPC,OAAO,EACPxD,MAAO,IALO,E,iFASE,IAAD,OACjByD,IAAOC,UAAU,eAAgB5C,KACjC2C,IAAO,mBAAoB,CAAC3C,KAAM,iBAAgB,SAAC6C,EAAKC,GACnDD,IAGH/B,QAAQC,IAAI+B,GACZhC,QAAQC,IAAI,4HACZD,QAAQC,IAAI,qCAEdK,KAAKS,GAAGkB,OAAS,WACf,EAAKX,SAAS,CAACM,OAAO,KAGxBtB,KAAKS,GAAGmB,QAAU,WAChB,EAAKZ,SAAS,CAACK,OAAO,KAGxBrB,KAAKS,GAAGoB,UAAY,SAAAC,GAClB,IAAMhD,EAAOiD,KAAKC,MAAMF,EAAIJ,MAC5B,EAAKZ,QAAQhC,M,+BAYR,IAAD,EACiBkB,KAAKoB,MAArBE,EADD,EACCA,MAAOD,EADR,EACQA,MACPvD,EAASkC,KAAKoB,MAAdtD,MACP,OACE,yBAAKmE,UAAU,OACb,yBAAKA,UAAU,eACdZ,GACD,0GAECC,IAAUD,GACX,kBAAC,IAAMa,SAAP,KACE,yBAAKC,IAAKC,IAAaH,UAAU,WAAWI,IAAI,OAAOC,OAAO,eAC9D,yBAAKC,KAAK,aACR,0BAAMC,QAASxC,KAAKiB,SAASwB,KAAKzC,KAAM,SAAUqC,IAAI,QAAQK,MAAM,QAAOC,OAAO,kBAAkBC,MAAM,SAC1G,0BAAMJ,QAASxC,KAAKiB,SAASwB,KAAKzC,KAAM,QAASqC,IAAI,OAAOK,MAAM,OAAOC,OAAO,kBAAkBC,MAAM,SACxG,0BAAMJ,QAASxC,KAAKiB,SAASwB,KAAKzC,KAAM,UAAWqC,IAAI,SAASK,MAAM,SAASC,OAAO,kBAAkBC,MAAM,SAC9G,0BAAMJ,QAASxC,KAAKiB,SAASwB,KAAKzC,KAAM,SAAUqC,IAAI,QAAQK,MAAM,QAAQC,OAAO,kBAAkBC,MAAM,UAE7G,kBAAC,EAAD,CAAY9E,MAAOA,W,GA9DX+B,IAAMU,YCGJsC,QACW,cAA7BlC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASiC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAc9B,MAAM+B,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.18424f9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/main.3538342a.jpg\";","import React from 'react'\n\nconst canvasWidth = 960\nconst canvasHeight = 480\n\nconst options = ['johan', 'gill', 'anders', 'peter']\n\nconst colors = {\n  johan: '#F9EC37',\n  gill: '#EFF5EF', \n  anders: '#35A14A',\n  peter: '#009AC0'\n}\n\nconst renderRect = (ctx, {x, y, width, height, color}) => {\n  ctx.fillStyle = color\n  ctx.fillRect(x, y, width, height)\n}\n\nconst getTotalVotes = votes => Object.values(votes).reduce((sum, v) => sum + v, 0)\n\nconst getRects = (options, votes) => {\n  const total = getTotalVotes(votes)\n  let lastOption\n\n  return options.reduce((result, option) => {\n    const vote = votes[option ]\n    const color = colors[option]\n\n    let x = 0\n    if(lastOption){\n      const last = result[lastOption] \n      x = last.x + last.width + 1\n    }\n\n    const width = Math.max(50+(canvasWidth-200) * (vote/total), 50)\n\n    const rect = {\n      y: 0,\n      x,\n      width,\n      height: canvasHeight,\n      color\n    }\n    \n    result[option] = rect\n    lastOption = option\n    return result\n  }, {})\n}\n\nclass GameCanvas extends React.Component {\n\n  likes = {\n    johan: [],\n    gill: [],\n    anders: [],\n    peter: []\n  }\n\n  votes = { \n    johan: 0,\n    gill: 0, \n    anders: 0,\n    peter: 0\n  }\n\n  constructor(props) {\n    super(props);\n    this.animationFrameRequestId = undefined\n    this.canvasRef = React.createRef();\n    this.animate = true\n  }\n\n  componentDidMount() {\n    this.lastIteration = Date.now()\n    this.animationFrameRequestId = requestAnimationFrame(this.updateCanvas)\n  }\n\n  componeneWillUnomount(){\n    if(this.animationFrameRequestId){\n      cancelAnimationFrame(this.animationFrameRequestId)\n    }\n  }\n\n  shouldComponentUpdate(nextProps){\n    Object.entries(nextProps.likes).forEach(([prop, value]) => {\n      if(!value){\n        return\n      }\n      this.votes[prop] = this.votes[prop] += value\n      this.likes[prop].push({pos: canvasHeight/2 + 60, value})\n    })\n    return false\n  }\n\n  updateCanvas = () => {\n    try{\n      const nextIteration = Date.now()\n      const passed = nextIteration - this.lastIteration\n      const canvas = this.canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      const rects = getRects(options, this.votes)\n\n      ctx.clearRect(0,0, canvasHeight, canvasWidth)\n\n      options.forEach(option => {\n        renderRect(ctx, rects[option])\n        const optionLikes = this.likes[option]\n        const votes = this.votes[option]\n        const x = rects[option].x + rects[option].width/2 - 20\n\n        ctx.font = \"20px Courier New \";\n        ctx.fillStyle = `rgba(0, 0, 0, 1)`;\n        ctx.fillText(`${votes}`, rects[option].x, canvasHeight-5)\n\n        optionLikes.forEach((like, i) =>{\n          \n          const nextPos = like.pos - 0.2 * passed\n    \n          if(nextPos < 0){\n            optionLikes.splice(i, 1)\n            return\n          }\n          \n          const opacity = Math.min(Math.round(100*(nextPos / (canvasHeight/2)))/100, 1)\n          ctx.fillStyle = `rgba(80, 80, 0, ${opacity})`;\n          ctx.font = \"30px Courier New \";\n          ctx.fillText(`+${like.value}`, x, like.pos)\n          like.pos = nextPos\n        })\n      })\n\n      this.lastIteration = nextIteration\n      this.animationFrameRequestId = requestAnimationFrame(this.updateCanvas)\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  render() {\n    return(\n      <div>\n        <canvas ref={this.canvasRef} width={canvasWidth} height={canvasHeight} />\n      </div>\n    )\n  }\n}\nexport default GameCanvas","import React from 'react';\nimport figlet from 'figlet'\nimport font from 'figlet/importable-fonts/Fire Font-k'\n\nimport GameCanvas from './GameCanvas'\nimport headerImage from './main.jpg'\nimport './App.css';\n\n\nclass App extends React.Component {  \n  ws = new WebSocket(`ws://${window.location.hostname}`)\n\n  constructor(props){\n    super(props)\n    this.state = {\n      error: false,\n      ready: false,\n      likes: {}\n    }\n  }\n\n  componentDidMount(){\n    figlet.parseFont('/Fire Font-k', font);\n    figlet('CHEATER DETECTED', {font: '/Fire Font-k'},(err, data) => {\n      if(err){\n        return\n      }\n      console.log(data)\n      console.log('Here at EdgarWars.com we have a very strict cheating policy and any attempt at cheating is therefore greatly encouraged.')\n      console.log('As long as your Edgar wins...')\n    })\n    this.ws.onopen = () => {\n      this.setState({ready: true})\n    }\n\n    this.ws.onclose = () => {\n      this.setState({error: true})\n    }\n\n    this.ws.onmessage = evt => {\n      const like = JSON.parse(evt.data)\n      this.newLike(like)\n    }\n  }\n \n  newLike = d => {\n    this.setState({likes: d})\n  } \n\n  mapClick = p => {\n    this.ws.send(p)\n  }\n\n  render(){\n    const {ready, error} = this.state\n    const {likes} = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"App-content\">\n        {error && \n        <div> WOOOOOOPS. Try to reload, if that doesn't work then you are fuuuuuucked.</div>\n        }\n        {ready && !error &&\n        <React.Fragment>\n          <img src={headerImage} className=\"App-logo\" alt=\"logo\" useMap=\"#image-map\" />\n          <map name=\"image-map\">\n            <area onClick={this.mapClick.bind(this, 'johan')} alt=\"Johan\" title=\"Johan\"coords=\"127,145,272,483\" shape=\"rect\"/>\n            <area onClick={this.mapClick.bind(this, 'gill')} alt=\"Gill\" title=\"Gill\" coords=\"331,147,480,478\" shape=\"rect\"/>\n            <area onClick={this.mapClick.bind(this, 'anders')} alt=\"Anders\" title=\"Anders\" coords=\"669,483,529,148\" shape=\"rect\"/>\n            <area onClick={this.mapClick.bind(this, 'peter')} alt=\"Peter\" title=\"Peter\" coords=\"832,483,691,147\" shape=\"rect\"/>\n          </map>\n          <GameCanvas likes={likes}/>\n        </React.Fragment>\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}